// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  engineType      = "client"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STUDENT 
}

model User{
  id String @id @default(cuid())
  photo Json?
  email String @unique
  name String
  password String
  role Role @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studentUser StudentUser?
  userProjects UserProject[]
}

model Categories {
  id String @id @default(cuid())
  name String @unique
  slug String @unique

  userProjects UserProjectCategories[]
}

model StudentUser{
  userId String @id
  major String
  classLevel Int
  birthday DateTime @db.Date
  telp String?
  bio String?

  skills StudentUserSkills[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Skill{
  id String @id @default(cuid())
  name String @unique

  studentUsers StudentUserSkills[]
}

model StudentUserSkills{
  studentUserId String
  skillId String
  
  studentUser StudentUser @relation(fields: [studentUserId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@id([studentUserId, skillId])

}

model UserProject{
  domain String @id
  userId String
  banner Json?
  title String
  content Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categories UserProjectCategories[]
  userProjectViews UserProjectViews[]
}

model UserProjectCategories{
  userProjectId String
  categoryId String

  userProject UserProject @relation(fields: [userProjectId], references: [domain], onDelete: Cascade, onUpdate: Cascade)
  categories Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@id([userProjectId, categoryId])
}

model UserProjectViews{
  id String @id @default(cuid())
  userProjectId String
  address String
  createdAt DateTime @default(now())

  userProject UserProject @relation(fields: [userProjectId], references: [domain], onDelete: Cascade, onUpdate: Cascade)
  
  @@index([userProjectId, address, createdAt])
}